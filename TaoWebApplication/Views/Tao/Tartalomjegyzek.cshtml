@using TaoDatabaseService
@using TaoWebApplication.Models
@using TaoContracts.Contracts
@model TartalomjegyzekModel

@{
    ViewBag.Title = "Home Page";
    var currentPage = @Model.Pages.FirstOrDefault(p => p.Name == "Tartalomjegyzek");
}

<div>
    Ide is jöhet bármilyen szép és hangzatos felirat<br /><br />
</div>

@using (Html.BeginForm("Tartalomjegyzek", "Tao", FormMethod.Post))
{
    <div>
        <div class="InnerLeft">
            <table class="TaoDataTable table" style="margin-bottom:0px;">
                <thead>
                    <tr>
                        <th width="5%" style="text-align:center">#</th>
                        <th class="col-md-4">Leírás</th>
                        <th class="col-md-2">Érték</th>
                        <th class="col-md-3">Megjegyzés</th>
                    </tr>
                </thead>

                @foreach (var field in @Model.PageDescriptors.Where(f => f.SectionGroup != 2).OrderBy(s => s.Order))
                {
                    var fieldDescriptor = Model.Fields.FirstOrDefault(f => f.Id == field.FieldId);
                    var color = fieldDescriptor.IsEditable ? "yellow" : "white";

                    <tr>
                        <td>
                            @field.OrderCharacter
                        </td>
                        <td>
                            @fieldDescriptor.Title
                        </td>
                        <td>
                            @CreateField(fieldDescriptor)
                        </td>
                        <td>
                            @field.Description
                        </td>
                    </tr>
                }
            </table>

        </div>

        <div class="InnerRight">
            <table class="TaoDataTable table">
                <thead >
                    <tr>
                        <th width="5%" style="text-align:center">#</th>
                        <th class="col-md-4">Leírás</th>
                        <th class="col-md-2">Érték</th>
                        <th class="col-md-3">Megjegyzés</th>
                    </tr>
                </thead>

                @foreach (var field in @Model.PageDescriptors.Where(f => f.SectionGroup == 2).OrderBy(s => s.Order))
                {
                    var fieldDescriptor = Model.Fields.FirstOrDefault(f => f.Id == field.FieldId);
                    <tr>
                        <td>
                            @field.OrderCharacter
                        </td>
                        <td>
                            @fieldDescriptor.Title
                        </td>
                        <td>
                            @CreateField(fieldDescriptor)
                        </td>

                        <td>
                            @field.Description
                        </td>
                    </tr>
                }
            </table>
        </div>
    </div>
    <div class="InnerLeft">
        @*<button type="submit" value="SaveAndContinueBackward" name="SaveAndContinue" class="btn btn-default">Mentés és előző</button>
        <button type="submit" value="Save" name="Save" class="btn btn-default">Mentés</button>
        <button type="submit" value="SaveAndContinueForward" name="SaveAndContinue" class="btn btn-default">Mentés és következő</button>*@


        <input type="submit" value="Mentés és előző" name="buttonAction" class="btn btn-default" />
        <input type="submit" value="Mentés" name="buttonAction" class="btn btn-default" />
        <input type="submit" value="Mentés és következő" name="buttonAction" class="btn btn-default" />
    </div>
}

@functions {

    public HtmlString CreateField(FieldDescriptorDto fieldDescriptor)
    {
        var color = fieldDescriptor.IsEditable ? "yellow" : "#e6f2ff";

        if (!fieldDescriptor.IsEditable || fieldDescriptor.IsCaculated)
        {
            switch (fieldDescriptor.TypeName)
            {
                case "bool":
                    return @Html.Label(fieldDescriptor.BoolFieldValue ? "Igen" : "Nem", new { @class="TaoControl", @id = fieldDescriptor.Id, @Name = fieldDescriptor.Id, @style = $"width:100%; background-color:{@color};" });

                case "numeric":
                    return @Html.Label(fieldDescriptor.DecimalValue?.ToString(), new { @class="TaoControl", @id = fieldDescriptor.Id, @Name = fieldDescriptor.Id, @style = $"width:100%; background-color:{@color}; text-align:right;" });


                case "date":
                    if(fieldDescriptor.DateValue == null)
                    {
                        return @Html.Label("", new { @class="TaoControl", @id = fieldDescriptor.Id, @Name = fieldDescriptor.Id, @style = $"width:100%; background-color:{@color};" });
                    }
                    return @Html.Label(fieldDescriptor.DateValue?.ToString("yyyy-MM-dd"), new { @class="TaoControl", @id = fieldDescriptor.Id, @Name = fieldDescriptor.Id, @style = $"width:100%; background-color:{@color};" });


                default:
                    return @Html.Label(fieldDescriptor.StringValue, new { @class="TaoControl", @id = fieldDescriptor.Id, @Name = fieldDescriptor.Id, @style = $"width:100%; background-color:{@color};" });


            }
        }

        else if (!string.IsNullOrEmpty(fieldDescriptor.TypeOptions))
        {

            var comboItems = new List<SelectListItem>();
            foreach (var item in fieldDescriptor.TypeOptions.Split(';'))
            {
                comboItems.Add(new SelectListItem { Value = item, Text = item });
            }

            return @Html.DropDownListFor(m => fieldDescriptor, new SelectList(comboItems, "Value", "Text", fieldDescriptor.StringValue), new {@class="TaoControl", @id = fieldDescriptor.Id, @Name = fieldDescriptor.Id, style = $"width:100%; background-color:{@color};" });
        }
        else if (fieldDescriptor.TypeName == "bool")
        {
            return @Html.CheckBox(fieldDescriptor.Id.ToString(), fieldDescriptor.BoolFieldValue, new { id = fieldDescriptor.Id, Name = fieldDescriptor.Id , @class="TaoControl", @style="width:25px; height:25px;" });
        }
        else if (fieldDescriptor.TypeName == "date")
        {
            if (fieldDescriptor.DateValue == null)
            {
                return @Html.TextBoxFor(model => fieldDescriptor.DateValue, new { @id = fieldDescriptor.Id, @Name = fieldDescriptor.Id, @type = "date", @class = "datepicker TaoControl", @style = $"width:100%; background-color:{@color};" });
            }
            else
            {
                return @Html.TextBox(fieldDescriptor.Id.ToString(), fieldDescriptor.DateValue.Value.ToString("yyyy-MM-dd"), new { @id = fieldDescriptor.Id, @Name = fieldDescriptor.Id, @type = "date", @class = "datepicker TaoControl", @style = $"width:100%; background-color:{@color};" });
            }
        }
        else if (fieldDescriptor.TypeName == "numeric")
        {
            var specifier = "#;(#.#)";
            return Html.TextBox(fieldDescriptor.Id.ToString(), fieldDescriptor.DecimalValue != null ? fieldDescriptor.DecimalValue.Value.ToString(specifier) : "", new {@type= "number", @id = fieldDescriptor.Id, @Name = fieldDescriptor.Id, @class = "text-right form-control TaoControl", @style = $"width:100%; background-color:{@color}; height:25px" });
        }
        else
        {
            return Html.TextBoxFor(m => fieldDescriptor.StringValue, new { @id = fieldDescriptor.Id, @Name = fieldDescriptor.Id, @class="TaoControl", @style = $"width:100%; background-color:{@color};" });
        }
    }
}